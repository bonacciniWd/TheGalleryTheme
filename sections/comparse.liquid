{% comment %}
  Seção de Comparação de Imagens Estilo Apple para Shopify
  Recria o efeito de slider de comparação de imagens visto no site da Apple.
  Permite definir as imagens, textos descritivos, e a posição inicial do slider.
{% endcomment %}

<style>
  /* Estilos essenciais para a seção de comparação de imagens */
 .image-comparison {
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
  position: relative;
}

.comparison-container {
  position: relative;
  width: 100%;
  overflow: hidden;
}

.comparison-img {
  display: block;
  width: 100%;
  height: auto;
  position: absolute;
  top: 0;
  left: 0;
}

.img-before {
  z-index: 1;
}

.img-after {
  z-index: 2;
  clip-path: inset(0 50% 0 0); /* Começa cortada ao meio */
}

.slider {
  width: 100%;
  margin-top: 10px;
}

</style>

<section class="image-comparison-section-{{ section.id }}">
  <div class="image-comparison">
  <div class="comparison-container">
    <img src="{{ 'imagem1.png' | asset_url }}" alt="Imagem Antes" class="comparison-img img-before">
    <img src="{{ 'imagem2.png' | asset_url }}" alt="Imagem Depois" class="comparison-img img-after">
    <input type="range" min="0" max="100" value="50" class="slider" aria-label="Comparação de Imagens">
  </div>
</div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const sectionId = '{{ section.id }}';
    const container = document.querySelector(`.image-comparison-container-${sectionId}`);
    const afterImageClipper = document.querySelector(`.image-comparison-after-clipper-${sectionId}`);
    const afterImgElement = afterImageClipper ? afterImageClipper.querySelector('.image-comparison-after-image-' + sectionId) : null;
    const sliderLine = document.querySelector(`.image-comparison-slider-line-${sectionId}`);
    const sliderHandle = document.querySelector(`.image-comparison-slider-handle-${sectionId}`);

    console.log(`[Slider ${sectionId}] Inicializando...`);
    console.log(`[Slider ${sectionId}] Container:`, container);
    console.log(`[Slider ${sectionId}] After Clipper:`, afterImageClipper);
    console.log(`[Slider ${sectionId}] After Img Element:`, afterImgElement);
    console.log(`[Slider ${sectionId}] Slider Line:`, sliderLine);
    console.log(`[Slider ${sectionId}] Slider Handle:`, sliderHandle);


    if (!container || !afterImageClipper || !afterImgElement || !sliderLine || !sliderHandle) {
      console.error(`[Slider ${sectionId}] ERRO: Um ou mais elementos essenciais não foram encontrados. O slider não funcionará.`);
      return;
    }

    let isDragging = false;

    function updateSlider(e) {
      const containerRect = container.getBoundingClientRect();
      let clientX;

      if (e.touches && e.touches.length > 0) {
        clientX = e.touches[0].clientX;
      } else {
        clientX = e.clientX;
      }

      let x = clientX - containerRect.left;

      // Limita o movimento do slider dentro do container
      if (x < 0) x = 0;
      if (x > containerRect.width) x = containerRect.width;

      // Adicionando logs detalhados para depuração do movimento
      console.log(`[Slider ${sectionId} - Movimento]`);
      console.log(`  clientX: ${clientX}`);
      console.log(`  containerRect.left: ${containerRect.left}`);
      console.log(`  containerRect.width: ${containerRect.width}`);
      console.log(`  Calculated X: ${x}`);
      console.log(`  Clipper Width (before update): ${afterImageClipper.style.width}`);
      console.log(`  After Image Left (before update): ${afterImgElement.style.left}`);


      afterImageClipper.style.width = `${x}px`;
      afterImgElement.style.width = `${containerRect.width}px`;
      afterImgElement.style.left = `-${x}px`;

      sliderLine.style.left = `${x}px`;
      sliderHandle.style.left = `${x}px`;

      console.log(`  Clipper Width (after update): ${afterImageClipper.style.width}`);
      console.log(`  After Image Left (after update): ${afterImgElement.style.left}`);
      console.log(`  Slider Line Left: ${sliderLine.style.left}`);
      console.log(`  Slider Handle Left: ${sliderHandle.style.left}`);
      console.log('---');
    }

    // Eventos de mouse
    sliderHandle.addEventListener('mousedown', (e) => {
      isDragging = true;
      sliderHandle.style.cursor = 'grabbing';
      e.preventDefault();
      console.log(`[Slider ${sectionId}] Mousedown: Arrasto iniciado.`);
    });

    document.addEventListener('mouseup', () => {
      if (isDragging) {
        isDragging = false;
        sliderHandle.style.cursor = 'grab';
        console.log(`[Slider ${sectionId}] Mouseup: Arrasto finalizado.`);
      }
    });

    document.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      e.preventDefault();
      updateSlider(e);
    });

    // Eventos de toque
    sliderHandle.addEventListener('touchstart', (e) => {
      isDragging = true;
      sliderHandle.style.cursor = 'grabbing';
      e.preventDefault();
      console.log(`[Slider ${sectionId}] Touchstart: Arrasto iniciado.`);
    }, { passive: false });

    document.addEventListener('touchend', () => {
      if (isDragging) {
        isDragging = false;
        sliderHandle.style.cursor = 'grab';
        console.log(`[Slider ${sectionId}] Touchend: Arrasto finalizado.`);
      }
    });

    document.addEventListener('touchmove', (e) => {
      if (!isDragging) return;
      e.preventDefault();
      updateSlider(e);
    }, { passive: false });

    function setInitialPosition() {
      const initialPercentage = parseFloat('{{ section.settings.initial_slider_position }}') / 100;
      const containerWidth = container.getBoundingClientRect().width;
      const initialX = containerWidth * initialPercentage;

      console.log(`[Slider ${sectionId} - Initial Position]`);
      console.log(`  Initial Percentage Setting: ${section.settings.initial_slider_position}%`);
      console.log(`  Parsed Initial Percentage: ${initialPercentage}`);
      console.log(`  Container Width for Initial Position: ${containerWidth}`);
      console.log(`  Calculated Initial X: ${initialX}`);

      afterImageClipper.style.width = `${initialX}px`;
      afterImgElement.style.width = `${containerWidth}px`;
      afterImgElement.style.left = `-${initialX}px`;
      sliderLine.style.left = `${initialX}px`;
      sliderHandle.style.left = `${initialX}px`;
      console.log(`[Slider ${sectionId}] Posição inicial definida para ${initialPercentage * 100}% (${initialX}px).`);
      console.log('---');
    }

    window.addEventListener('load', setInitialPosition);
    window.addEventListener('resize', setInitialPosition);
    setInitialPosition(); // Chama para o editor de temas e carregamento inicial rápido
  });
</script>


{% schema %}
{
  "name": "Comparação",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Título da Seção",
      "default": "Compare a Evolução"
    },
    {
      "type": "image_picker",
      "id": "image_before",
      "label": "Imagem 'Antes'",
      "info": "A imagem original ou 'antes'."
    },
    {
      "type": "text",
      "id": "label_before",
      "label": "Texto 'Antes'",
      "default": "Série Anterior"
    },
    {
      "type": "image_picker",
      "id": "image_after",
      "label": "Imagem 'Depois'",
      "info": "A imagem nova ou 'depois'."
    },
    {
      "type": "text",
      "id": "label_after",
      "label": "Texto 'Depois'",
      "default": "Série Nova"
    },
    {
      "type": "range",
      "id": "initial_slider_position",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Posição Inicial do Slider",
      "default": 50,
      "info": "Define a posição inicial do slider em porcentagem (0% = todo 'depois', 100% = todo 'antes')."
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 300,
      "max": 1600,
      "step": 50,
      "unit": "px",
      "label": "Largura Máxima do Slider",
      "default": 1000,
      "info": "Largura máxima do container de comparação de imagens."
    },
    {
      "type": "range",
      "id": "aspect_ratio",
      "min": 0.5,
      "max": 2.0,
      "step": 0.1,
      "label": "Proporção da Imagem (Largura/Altura)",
      "default": 1.3,
      "info": "Define a proporção da imagem (ex: 1.3 para 4:3, 1.7 para 16:9). Ajuste para a proporção das suas imagens."
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Cor de Fundo da Seção",
      "default": "#f5f5f7"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Cor do Texto",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "slider_line_color",
      "label": "Cor da Linha do Slider",
      "default": "#007aff"
    },
    {
      "type": "color",
      "id": "slider_handle_color",
      "label": "Cor do Handle do Slider",
      "default": "#007aff"
    }
  ],
  "presets": [
    {
      "name": "Comparação de Imagens (Apple)",
      "category": "Imagens e Vídeos"
    }
  ]
}
{% endschema %}